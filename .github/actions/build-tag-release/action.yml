name: "ACore Module Build and Release"
description: "A reusable action for building, checking, and releasing AzerothCore modules"
author: "araxiaonline"

inputs:
  GITHUB_TOKEN:
    description: "GitHub token"
    required: true
  tag_release:
    description: "Tag a release if the build is successful"
    required: false
    default: "false"
  bump_version_scheme:
    description: "Version bump scheme (e.g., minor, major, patch)"
    required: false
    default: "minor" 
  event_name:
    description: "Name of the github event"
    required: true
    default: ""           

runs:
  using: "composite"
  steps:

    - name: cache docker
      uses: actions/cache@v4
      with:
        path: /home/runner/.docker
        key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: checkout code
      uses: actions/checkout@v4

    - name: get repo name
      id: repo-name
      shell: bash
      run: echo "REPO_NAME=$(basename $GITHUB_REPOSITORY | sed 's|.*/||')" >> $GITHUB_ENV

    - name: copy module to container
      shell: bash
      run: |
        mkdir -p /azerothcore/modules/${{ env.REPO_NAME }}
        cp -r . /azerothcore/modules/${{ env.REPO_NAME }}

    - name: build modules with caching
      shell: bash
      run: |
        cd /azerothcore/build \
        && cmake /azerothcore \
           -DCMAKE_INSTALL_PREFIX="/azerothcore/env/dist"  \
           -DAPPS_BUILD="all"                              \
           -DTOOLS_BUILD="all"                             \
           -DSCRIPTS="static"                              \
           -DMODULES="static"                              \
           -DWITH_WARNINGS="ON"                            \
           -DCMAKE_BUILD_TYPE="RelWithDebInfo"             \
           -DCMAKE_CXX_COMPILER="clang++"                  \
           -DCMAKE_C_COMPILER="clang"                      \
           -DCMAKE_CXX_COMPILER_LAUNCHER="ccache"          \
           -DCMAKE_C_COMPILER_LAUNCHER="ccache"            \
           -DBoost_USE_STATIC_LIBS="ON"                    \
        && cmake --build . --config "RelWithDebInfo" -j $(($(nproc) + 1))

    - name: install cppcheck
      shell: bash
      run: apt-get update && apt-get install -y cppcheck

    - name: get cppcheck cache
      uses: actions/cache@v4
      with:
        path: /home/runner/work/${{ github.repository }}/_cppcheck_cache
        key: ${{ runner.os }}-cppcheck-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cppcheck-

    - name: cpp check
      if: ${{ inputs.tag_release == 'true' }}
      shell: bash
      run: |
        cppcheck --force --inline-suppr --std=c++20 --output-file=report.txt \
                 --exclude=LuaEngine/libs \
                 --jobs=$(nproc) --enable=warning,error \
                 --cppcheck-build-dir=/home/runner/work/${{ github.repository }}/_cppcheck_cache \
                 
                 /azerothcore/modules/${{ env.REPO_NAME }}
        if [ -s report.txt ]; then
          cat report.txt
          exit 1
        fi

    - name: tag release 
      if: ${{ inputs.tag_release == 'true' }} && ${{ inputs.event_name == 'push' }}
      uses: rymndhng/release-on-push-action@master
      with:
        bump_version_scheme: ${{ inputs.bump_version_scheme }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: save cppcheck cache
      if: success()
      uses: actions/cache@v4
      with:
        path: /home/runner/work/${{ github.repository }}/_cppcheck_cache
        key: ${{ runner.os }}-cppcheck-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cppcheck-
